* org-ls
:PROPERTIES:
:header-args: :tangle yes
:END:
** header
#+begin_src emacs-lisp
  ;;; org-ls.el --- Org Life Support

  ;; Copyright (C) 2017 Dustin Lacewell

  ;; Author: Dustin Lacewell <dlacewell@gmail.com>
  ;; Version: 0.1
  ;; Package-Requires: (cl-lib f s)
  ;; Keywords: org babel
  ;; URL: http://github.com/dustinlacewell/org-ls
#+end_src
** requirements
    #+begin_src emacs-lisp
      (require 'cl-lib)
      (require 'f)
      (require 's)
    #+end_src
** org-ls--support-file-name
    #+begin_src emacs-lisp
      (defvar org-ls--support-file-name nil)
    #+end_src
** org-ls--keyword-name
    #+begin_src emacs-lisp
      (defun keyword-name (keyword)
        (s-chop-prefix ":" (symbol-name keyword)))
    #+end_src
** org-ls--param-is-var?
   #+begin_src emacs-lisp
     (defun org-ls--param-is-var? (param)
       (string= "var" (keyword-name (first param))))
     ;; (org-ls--param-is-var? '(:var foo . "var"))
     ;; (org-ls--param-is-var? '(:name foo . "var"))
   #+end_src
** org-ls--get-var-params
   #+begin_src emacs-lisp
     (require 'cl-lib)

     (defun org-ls--get-var-params (params)
       (cl-remove-if-not 'org-ls--param-is-var? params))

     ;; (org-ls--get-val-props '((:foo bar . "baz") (:var app . "Google Chrome")))
   #+end_src
** org-ls--get-var-param
   #+begin_src emacs-lisp
     (defun org-ls--get-var-param (vars keyword)
       (let ((name (keyword-name keyword)))
         (seq-find
          (lambda (ele)
            (let* ((var-sym (second ele))
                   (var-name (symbol-name var-sym)))
              (string= var-name name))) vars)))
   #+end_src
** org-ls--var-name
    #+begin_src emacs-lisp
      (defun org-ls--var-name (param)
        (let* ((app-sym (second param)))
          (symbol-name app-sym)))
    #+end_src
** org-ls--var-value
    #+begin_src emacs-lisp
      (defun org-ls--var-value (param)
        (cddr param))
    #+end_src
** org-ls-do
   #+begin_src emacs-lisp
     (defun org-ls-do (name &rest args)
       (with-temp-buffer
         (insert-file-contents org-ls--support-file-name)
         (org-babel-goto-named-src-block name)
         (let* ((info (org-babel-get-src-block-info))
                (params (third info))
                (vars (org-ls--get-var-params params)))
           (message "PRE: %s" info)
           (cl-loop for (key val) on args by #'cddr do
                    (message (format "Key: %s" key))
                    (message (format "Val: %s" val))
                    (--when-let (org-ls--get-var-param vars key)
                      (let* ((var-name (org-ls--var-name it))
                             (var-sym (make-symbol var-name))
                             (new-cdr (cons var-sym val)))
                        (setcdr it new-cdr))))
           (message "POST: %s" info)
           (org-babel-execute-src-block nil info))))
   #+end_src
